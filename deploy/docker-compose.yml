version: '3.9'
services:
  api:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
      target: prod
    image: ${RABBIT_REGISTRY}rabbit-backend:${RABBIT_BACKEND_VERSION:-latest}
    restart: always
    env_file: [.env]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    environment:
      RABBIT_BACKEND_HOST: 0.0.0.0
      RABBIT_BACKEND_DB_HOST: rabbit-backend-db
      RABBIT_BACKEND_DB_PORT: 5432
      RABBIT_BACKEND_DB_USER: rabbit-backend
      RABBIT_BACKEND_DB_PASS: rabbit-backend
      RABBIT_BACKEND_DB_BASE: rabbit-backend
      RABBIT_BACKEND_REDIS_HOST: rabbit-backend-redis
  db:
    image: postgres:13.8-bullseye
    hostname: rabbit-backend-db
    environment:
      POSTGRES_PASSWORD: rabbit-backend
      POSTGRES_USER: rabbit-backend
      POSTGRES_DB: rabbit-backend
    volumes: [rabbit-backend-db-data:/var/lib/postgresql/data]
    restart: always
    healthcheck:
      test: pg_isready -U rabbit-backend
      interval: 2s
      timeout: 3s
      retries: 40
  migrator:
    image: ${RABBIT_REGISTRY}rabbit-backend:${RABBIT_BACKEND_VERSION:-latest}
    restart: 'no'
    command: alembic upgrade head
    environment:
      RABBIT_BACKEND_DB_HOST: rabbit-backend-db
      RABBIT_BACKEND_DB_PORT: 5432
      RABBIT_BACKEND_DB_USER: rabbit-backend
      RABBIT_BACKEND_DB_PASS: rabbit-backend
      RABBIT_BACKEND_DB_BASE: rabbit-backend
    depends_on:
      db:
        condition: service_healthy
  redis:
    image: bitnami/redis:6.2.5
    hostname: rabbit-backend-redis
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: 'yes'
    healthcheck:
      test: sh -c redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 50
volumes:
  rabbit-backend-db-data:
    name: rabbit-backend-db-data
