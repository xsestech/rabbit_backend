<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="0" skipped="0" tests="1" time="1.718" timestamp="2024-05-07T18:50:12.711423" hostname="Alexs-MacBook-Air.local"><testcase classname="rabbit_backend.tests.test_rabbit_backend" name="test_health" time="0.138"><error message="failed on setup with &quot;OSError: Multiple exceptions: [Errno 61] Connect call failed ('::1', 5432, 0, 0), [Errno 61] Connect call failed ('127.0.0.1', 5432)&quot;">anyio_backend = 'asyncio', args = (), kwargs = {}, backend_name = 'asyncio', backend_options = {}
runner = &lt;anyio._backends._asyncio.TestRunner object at 0x109cd5010&gt;

    def wrapper(*args, anyio_backend, **kwargs):  # type: ignore[no-untyped-def]
        backend_name, backend_options = extract_backend_and_options(anyio_backend)
        if has_backend_arg:
            kwargs["anyio_backend"] = anyio_backend

        with get_runner(backend_name, backend_options) as runner:
            if isasyncgenfunction(func):
&gt;               yield from runner.run_asyncgen_fixture(func, kwargs)

../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/anyio/pytest_plugin.py:68:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/anyio/_backends/_asyncio.py:2094: in run_asyncgen_fixture
    self._loop.run_until_complete(f)
/opt/homebrew/Cellar/python@3.11/3.11.6_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py:653: in run_until_complete
    return future.result()
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/anyio/_backends/_asyncio.py:2074: in fixture_runner
    retval = await agen.asend(None)
rabbit_backend/conftest.py:45: in _engine
    await create_database()
rabbit_backend/db/utils.py:13: in create_database
    async with engine.connect() as conn:
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/ext/asyncio/base.py:121: in __aenter__
    return await self.start(is_ctxmanager=True)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/ext/asyncio/engine.py:273: in start
    await greenlet_spawn(self.sync_engine.connect)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:201: in greenlet_spawn
    result = context.throw(*sys.exc_info())
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3280: in connect
    return self._connection_cls(self)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/engine/base.py:146: in __init__
    self._dbapi_connection = engine.raw_connection()
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3304: in raw_connection
    return self.pool.connect()
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/pool/base.py:449: in connect
    return _ConnectionFairy._checkout(self)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/pool/base.py:1263: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/pool/base.py:712: in checkout
    rec = pool._do_get()
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/pool/impl.py:179: in _do_get
    with util.safe_reraise():
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/pool/impl.py:177: in _do_get
    return self._create_connection()
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/pool/base.py:390: in _create_connection
    return _ConnectionRecord(self)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/pool/base.py:674: in __init__
    self.__connect()
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/pool/base.py:900: in __connect
    with util.safe_reraise():
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/pool/base.py:896: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/engine/create.py:643: in connect
    return dialect.connect(*cargs, **cparams)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/engine/default.py:617: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:937: in connect
    await_only(creator_fn(*arg, **kw)),
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:131: in await_only
    return current.driver.switch(awaitable)  # type: ignore[no-any-return]
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/asyncpg/connection.py:2329: in connect
    return await connect_utils._connect(
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/asyncpg/connect_utils.py:1017: in _connect
    raise last_error or exceptions.TargetServerAttributeNotMatched(
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/asyncpg/connect_utils.py:991: in _connect
    conn = await _connect_addr(
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/asyncpg/connect_utils.py:828: in _connect_addr
    return await __connect_addr(params, True, *args)
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/asyncpg/connect_utils.py:873: in __connect_addr
    tr, pr = await connector
../../../Library/Caches/pypoetry/virtualenvs/rabbit-backend-VL87Algs-py3.11/lib/python3.11/site-packages/asyncpg/connect_utils.py:744: in _create_ssl_connection
    tr, pr = await loop.create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;_UnixSelectorEventLoop running=False closed=True debug=False&gt;, protocol_factory = &lt;function _create_ssl_connection.&lt;locals&gt;.&lt;lambda&gt; at 0x10a0816c0&gt;
host = 'localhost', port = 5432

    async def create_connection(
            self, protocol_factory, host=None, port=None,
            *, ssl=None, family=0,
            proto=0, flags=0, sock=None,
            local_addr=None, server_hostname=None,
            ssl_handshake_timeout=None,
            ssl_shutdown_timeout=None,
            happy_eyeballs_delay=None, interleave=None):
        """Connect to a TCP server.

        Create a streaming transport connection to a given internet host and
        port: socket family AF_INET or socket.AF_INET6 depending on host (or
        family if specified), socket type SOCK_STREAM. protocol_factory must be
        a callable returning a protocol instance.

        This method is a coroutine which will try to establish the connection
        in the background.  When successful, the coroutine returns a
        (transport, protocol) pair.
        """
        if server_hostname is not None and not ssl:
            raise ValueError('server_hostname is only meaningful with ssl')

        if server_hostname is None and ssl:
            # Use host as default for server_hostname.  It is an error
            # if host is empty or not set, e.g. when an
            # already-connected socket was passed or when only a port
            # is given.  To avoid this error, you can pass
            # server_hostname='' -- this will bypass the hostname
            # check.  (This also means that if host is a numeric
            # IP/IPv6 address, we will attempt to verify that exact
            # address; this will probably fail, but it is possible to
            # create a certificate for a specific IP address, so we
            # don't judge it here.)
            if not host:
                raise ValueError('You must set server_hostname '
                                 'when using ssl without a host')
            server_hostname = host

        if ssl_handshake_timeout is not None and not ssl:
            raise ValueError(
                'ssl_handshake_timeout is only meaningful with ssl')

        if ssl_shutdown_timeout is not None and not ssl:
            raise ValueError(
                'ssl_shutdown_timeout is only meaningful with ssl')

        if sock is not None:
            _check_ssl_socket(sock)

        if happy_eyeballs_delay is not None and interleave is None:
            # If using happy eyeballs, default to interleave addresses by family
            interleave = 1

        if host is not None or port is not None:
            if sock is not None:
                raise ValueError(
                    'host/port and sock can not be specified at the same time')

            infos = await self._ensure_resolved(
                (host, port), family=family,
                type=socket.SOCK_STREAM, proto=proto, flags=flags, loop=self)
            if not infos:
                raise OSError('getaddrinfo() returned empty list')

            if local_addr is not None:
                laddr_infos = await self._ensure_resolved(
                    local_addr, family=family,
                    type=socket.SOCK_STREAM, proto=proto,
                    flags=flags, loop=self)
                if not laddr_infos:
                    raise OSError('getaddrinfo() returned empty list')
            else:
                laddr_infos = None

            if interleave:
                infos = _interleave_addrinfos(infos, interleave)

            exceptions = []
            if happy_eyeballs_delay is None:
                # not using happy eyeballs
                for addrinfo in infos:
                    try:
                        sock = await self._connect_sock(
                            exceptions, addrinfo, laddr_infos)
                        break
                    except OSError:
                        continue
            else:  # using happy eyeballs
                sock, _, _ = await staggered.staggered_race(
                    (functools.partial(self._connect_sock,
                                       exceptions, addrinfo, laddr_infos)
                     for addrinfo in infos),
                    happy_eyeballs_delay, loop=self)

            if sock is None:
                exceptions = [exc for sub in exceptions for exc in sub]
                try:
                    if len(exceptions) == 1:
                        raise exceptions[0]
                    else:
                        # If they all have the same str(), raise one.
                        model = str(exceptions[0])
                        if all(str(exc) == model for exc in exceptions):
                            raise exceptions[0]
                        # Raise a combined exception so the user can see all
                        # the various error messages.
&gt;                       raise OSError('Multiple exceptions: {}'.format(
                            ', '.join(str(exc) for exc in exceptions)))
E                           OSError: Multiple exceptions: [Errno 61] Connect call failed ('::1', 5432, 0, 0), [Errno 61] Connect call failed ('127.0.0.1', 5432)

/opt/homebrew/Cellar/python@3.11/3.11.6_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py:1093: OSError</error></testcase></testsuite></testsuites>
